#include <iostream>
#include <vector>
#include <queue>
using namespace std;

vector<vector<int>> g;
vector<bool> isVisit;

void DFS(int next) {
	cout << next << " ";
	isVisit[next] = true;

	priority_queue<int, vector<int>, greater<>> pq;
	for (auto& e : g[next]) {
		if (!isVisit[e]) {
			pq.push(e);
		}
	}
	while (!pq.empty()) {
		if(!isVisit[pq.top()]) DFS(pq.top());
		pq.pop();
	}
}

void BFS(int next) {
	vector<bool> isVisit2(g.size()+1, false);
	queue<int> q;
	q.push(next);

	while (!q.empty()) {
		int t = q.front();
		q.pop();

		if (isVisit2[t]) continue;

		isVisit2[t] = true;
		cout << t << " ";

		priority_queue<int, vector<int>, greater<>> pq;
		for (auto& e : g[t]) {
			if (!isVisit2[e]) {
				pq.push(e);
			}
		}
		while (!pq.empty()) {
			if (!isVisit2[pq.top()]) q.push(pq.top());
			pq.pop();
		}
	}
}

int main() {
	int N, M, V;
	cin >> N >> M >> V;

	int a, b;
	g.resize(N+1);
	isVisit.resize(N+1, false);

	for (int i{ 0 }; i < M; i++) {
		cin >> a >> b;
		g[a].push_back(b);
		g[b].push_back(a);
	}

	DFS(V);
	cout << "\n";
	BFS(V);
}
