#include <iostream>
#include <vector>
#include <queue>
#include <tuple>
using namespace std;

vector<vector<bool>> maze;
vector<vector<int>> maze_count;

void BFS() {
	int dx[4] = { 0, 1, 0, -1 };
	int dy[4] = { 1, 0, -1, 0 };

	queue<pair<int, int>> q;
	q.push({ 0, 0 });
	maze_count[0][0] = 1;

	while (!q.empty()) {
		int x, y;
		tie(x, y) = q.front();
		q.pop();

		for (int i{ 0 }; i < 4; i++) {
			int nx, ny;
			nx = x + dx[i];
			ny = y + dy[i];
			if (nx >= 0 && ny >= 0 && nx < maze.size() && ny < maze[0].size()
				&& maze[nx][ny] && maze_count[nx][ny] == -1) {
				maze_count[nx][ny] = maze_count[x][y] + 1;
				q.push({ nx, ny });
			}
		}
	}

}

int main() {
	int N, M;
	cin >> N >> M;

	maze.assign(N, vector<bool>(M, 0));
	maze_count.assign(N, vector<int>(M, -1));

	char c;
	for (int i{ 0 }; i < N; i++) {
		for (int j{ 0 }; j < M; j++) {
			cin >> c;
			if (c == '1') {
				maze[i][j] = true;
			}
		}
	}

	BFS();
	cout << maze_count[N - 1][M - 1];


}
